# You need to set up Workload Identity Federation in your Google Cloud project in order to use this GitHub Actions definition: https://medium.com/p/3932dce678b8.
# And the secrets.GSA_ID needs to have the roles/artifactregistry.repoAdmin role in order push and delete container images.
name: open-pr
permissions:
  contents: read
  id-token: write
  pull-requests: write
on:
  pull_request:
env:
  ENVIRONMENT_ID: pr-${{ github.event.number }}
  IMAGE_NAME: ${{ secrets.REGISTRY_LOCATION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REGISTRY_NAME }}/${{ vars.APP_NAME }}
  SCORE_COMPOSE_VERSION: 'latest'
  SCORE_HELM_VERSION: 'latest'
  SCORE_HUMANITEC_VERSION: 'latest'
  WORKLOAD_NAME: my-sample-app
  HUMCTL_VERSION: '0.11.0'
jobs:
  build-run-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install score-compose
        uses: score-spec/setup-score@v2
        with:
          file: score-compose
          token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ env.SCORE_COMPOSE_VERSION }}
      - name: generate docker compose files
        run: |
          score-compose run \
              --build app/ \
              -f score/score.yaml \
              -o ${{ env.WORKLOAD_NAME }}-compose.yaml
          cat <<EOF > base-compose.yaml
          services:
            ${{ env.WORKLOAD_NAME }}:
              image: ${{ env.IMAGE_NAME }}:${{ env.ENVIRONMENT_ID }}
              read_only: true
              cap_drop:
                - ALL
              user: "1000"
          EOF
      - name: build & run container
        run: |
          docker compose \
              -f ${{ env.WORKLOAD_NAME }}-compose.yaml \
              -f base-compose.yaml \
              up \
              --build \
              -d \
              --wait \
              --wait-timeout 30
      - name: test container
        run: |
          sleep 10
          curl \
              -s \
              --connect-timeout 30 \
              localhost:8080
      - name: create kind cluster
        run: |
          kind create cluster
          kind load docker-image ${{ env.IMAGE_NAME }}:${{ env.ENVIRONMENT_ID }}
      - name: install score-helm
        uses: score-spec/setup-score@v2
        with:
          file: score-helm
          token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ env.SCORE_HELM_VERSION }}
      - name: generate helm values file
        run: |
          score-helm run \
              -f score/score.yaml \
              -o ${{ env.WORKLOAD_NAME }}-values.yaml
      - name: helm install
        id: helm-install
        run: |
          helm repo add \
              score-helm-charts \
              https://score-spec.github.io/score-helm-charts
          helm install \
              ${{ env.WORKLOAD_NAME }} \
              score-helm-charts/workload \
              --values ${{ env.WORKLOAD_NAME }}-values.yaml \
              --set containers.${{ env.WORKLOAD_NAME }}.image.name=${{ env.IMAGE_NAME }}:${{ env.ENVIRONMENT_ID }} \
              --wait \
              --timeout=30s
          kubectl wait \
              --for=condition=available \
              --timeout=30s \
              deployment/${{ env.WORKLOAD_NAME }}
      - name: catch helm install errors
        if: ${{ failure() && steps.helm-install.outcome == 'failure' }}
        run: |
          kubectl get events
          kubectl logs \
              -l app.kubernetes.io/name=${{ env.WORKLOAD_NAME }}
      - name: authenticate to google cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ secrets.WI_PROVIDER_ID }}'
          service_account: '${{ secrets.GSA_ID }}'
      - name: setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest
      - name: sign-in to gar
        run: |
          gcloud auth configure-docker \
              ${{ secrets.REGISTRY_LOCATION }}-docker.pkg.dev \
              --quiet
      - name: delete previous container image in gar
        run: |
          gcloud artifacts docker images delete \
              ${IMAGE_NAME}:${{ env.ENVIRONMENT_ID }} \
              --delete-tags \
              --quiet \
              || true
      - name: push the container to gar
        run: |
          docker push \
              ${{ env.IMAGE_NAME }}:${{ env.ENVIRONMENT_ID }}
  deploy-preview-env:
    needs: build-run-test-push
    runs-on: ubuntu-latest
    env:
      BASE_ENVIRONMENT: 'development'
      ENVIRONMENT_TYPE: 'development'
      ENVIRONMENT_NAME: PR-${{ github.event.number }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install humctl
        run: |
          curl -fLO https://storage.googleapis.com/humctl-releases/v${{ env.HUMCTL_VERSION }}/cli_${{ env.HUMCTL_VERSION }}_linux_amd64.tar.gz
          tar xvzf cli_${{ env.HUMCTL_VERSION }}_linux_amd64.tar.gz
          rm cli_${{ env.HUMCTL_VERSION }}_linux_amd64.tar.gz README.md
          chmod +x humctl
          mv humctl /usr/local/bin
      - name: create humanitec preview env
        run: |
          humctl create environment ${{ env.ENVIRONMENT_ID }} \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ secrets.HUMANITEC_ORG }} \
              --app ${{ vars.APP_NAME }} \
              --name ${{ env.ENVIRONMENT_NAME }} \
              -t ${{ env.ENVIRONMENT_TYPE }} \
              --from ${{ env.BASE_ENVIRONMENT }} \
              || true
      - name: authenticate to google cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ secrets.WI_PROVIDER_ID }}'
          service_account: '${{ secrets.GSA_ID }}'
      - name: setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest
      - name: sign-in to gar
        run: |
          gcloud auth configure-docker \
              ${{ secrets.REGISTRY_LOCATION }}-docker.pkg.dev \
              --quiet
      - name: get container image digest
        run: |
          echo "IMAGE_DIGEST=$(oras manifest fetch ${{ env.IMAGE_NAME }}:${{ env.ENVIRONMENT_ID }} \
              --descriptor \
              | jq -r .digest)" >> ${{ github.env }}
      - name: install score-humanitec
        uses: score-spec/setup-score@v2
        with:
          file: score-humanitec
          token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ env.SCORE_HUMANITEC_VERSION }}
      - name: deploy score-humanitec
        run: |
          score-humanitec delta \
              --retry \
              --deploy \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ secrets.HUMANITEC_ORG }} \
              --app ${{ vars.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} \
              -f score/score.yaml \
              --extensions score/humanitec.score.yaml \
              --message "$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "${{ github.event.pull_request.commits_url }}?per_page=10" | jq -r .[-1].commit.message)" \
              --property containers.${{ env.WORKLOAD_NAME }}.image=${{ env.IMAGE_NAME }}@${IMAGE_DIGEST} \
              | tee score_output.json
      - name: wait for deployment
        run: |
          sleep 1
          IS_DONE=false
          CURRENT_STATUS=""
          while [ "$IS_DONE" = false ]; do
            CURRENT_STATUS=$(humctl get environment ${{ env.ENVIRONMENT_ID }} -o json \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ secrets.HUMANITEC_ORG }} \
              --app ${{ vars.APP_NAME }} \
              | jq -r .object.last_deploy.status)
            if [ "$CURRENT_STATUS" = "in progress" ]; then
              echo "Deployment still in progress..."
              sleep 1
            elif [ "$CURRENT_STATUS" = "failed" ]; then
              echo "Deployment failed!"
              IS_DONE=true
            else
              echo "Deployment successfully completed!"
              IS_DONE=true
            fi
          done
          echo $CURRENT_STATUS
          if [ "$CURRENT_STATUS" = "failed" ]; then
              exit 1
          fi
      - name: build comment message
        if: ${{ always() }}
        run: |
          ENV_URL=$(jq -r ".metadata.url" score_output.json)
          DEPLOYMENT_ID=$(jq -r ".id" score_output.json)
          DOMAINS=$(humctl get active-resources \
                      --token ${{ secrets.HUMANITEC_TOKEN }} \
                      --org ${{ secrets.HUMANITEC_ORG }} \
                      --app ${{ vars.APP_NAME }} \
                      --env ${{ env.ENVIRONMENT_ID }} -o json \
                      | jq -r '. | map(. | select(.object.type == "dns")) | map((.object.res_id | split(".") | .[1]) + ": [" + .object.resource.host + "](https://" + .object.resource.host + ")") | join("\n")')
          
          DEPLOYMENT_ERRORS=$(humctl get deployment-error \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ secrets.HUMANITEC_ORG }} \
              --app ${{ vars.APP_NAME }} \
              --env ${{ env.ENVIRONMENT_ID }} -o json)
          if [ "$DEPLOYMENT_ERRORS" = "[]" ]; then
            echo "## Deployment successfully completed for ${{ env.ENVIRONMENT_NAME }}! :tada:" >> pr_message.txt
            echo "" >> pr_message.txt
          else
            echo "## Deployment failed for ${{ env.ENVIRONMENT_NAME }}! :x:" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Errors:" >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```json' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "$DEPLOYMENT_ERRORS" | jq .[0].object.message -r >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "<details><summary>Errors details</summary>" >> pr_message.txt
            echo "" >> pr_message.txt
            echo "### Errors details:" >> pr_message.txt
            echo '```json' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "$DEPLOYMENT_ERRORS" >> pr_message.txt
            echo "" >> pr_message.txt
            echo '```' >> pr_message.txt
            echo "" >> pr_message.txt
            echo "</details>" >> pr_message.txt
            echo "" >> pr_message.txt
          fi
          
          echo "### [View in Humanitec]($ENV_URL)" >> pr_message.txt
          echo "Deployment ID: $DEPLOYMENT_ID" >> pr_message.txt

          echo "" >> pr_message.txt
          echo "### Domains:" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "$DOMAINS" >> pr_message.txt
          echo "" >> pr_message.txt
          
          echo "<details><summary>Deployment diff</summary>" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "### Deployment diff:" >> pr_message.txt
          echo '```json' >> pr_message.txt
          echo "" >> pr_message.txt
          humctl diff sets env/${{ env.ENVIRONMENT_ID }} env/${{ env.BASE_ENVIRONMENT }} \
              --token ${{ secrets.HUMANITEC_TOKEN }} \
              --org ${{ secrets.HUMANITEC_ORG }} \
              --app ${{ vars.APP_NAME }} -o json >> pr_message.txt
          echo "" >> pr_message.txt
          echo '```' >> pr_message.txt
          echo "" >> pr_message.txt
          echo "</details>" >> pr_message.txt

          echo "<details><summary>Score Output</summary>" >> pr_message.txt
          echo "" >> pr_message.txt
          echo "### Score Output:" >> pr_message.txt
          echo '```json' >> pr_message.txt
          echo "" >> pr_message.txt
          cat score_output.json >> pr_message.txt
          echo "" >> pr_message.txt
          echo '```' >> pr_message.txt
          echo "" >> pr_message.txt
          echo "</details>" >> pr_message.txt

          cat pr_message.txt
      - name: comment pr
        if: ${{ always() }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: pr_message.txt  
